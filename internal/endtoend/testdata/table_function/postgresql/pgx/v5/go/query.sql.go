// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package querytest

import (
	"context"
)

const getTransaction = `-- name: GetTransaction :many
SELECT
	jsonb_extract_path(transactions.data, '$.transaction.signatures[0]'),
	jsonb_agg(instructions.value)
FROM
  transactions, 
	jsonb_each(jsonb_extract_path(transactions.data, '$.transaction.message.instructions[0]')) AS instructions
WHERE
	transactions.program_id = $1
	AND jsonb_extract_path(transactions.data, '$.transaction.signatures[0]') @> to_jsonb($2::text)
	AND jsonb_extract_path(jsonb_extract_path(transactions.data, '$.transaction.message.accountKeys'), 'key') = to_jsonb(transactions.program_id)
GROUP BY transactions.id
`

type GetTransactionParams struct {
	ProgramID string
	Data      string
}

type GetTransactionRow struct {
	JsonbExtractPath []byte
	JsonbAgg         []byte
}

func (q *Queries) GetTransaction(ctx context.Context, arg GetTransactionParams) ([]GetTransactionRow, error) {
	rows, err := q.db.Query(ctx, getTransaction, arg.ProgramID, arg.Data)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionRow
	for rows.Next() {
		var i GetTransactionRow
		if err := rows.Scan(&i.JsonbExtractPath, &i.JsonbAgg); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionWithoutAlias = `-- name: GetTransactionWithoutAlias :many
SELECT
    json_extract(transactions.data, '$.transaction.signatures[0]'),
    json_group_array(value)
FROM
    transactions,
    json_each(json_extract(transactions.data, '$.transaction.message.instructions'))
WHERE
    transactions.program_id = $1
    AND json_extract(transactions.data, '$.transaction.signatures[0]') > $2
    AND json_extract(json_extract(transactions.data, '$.transaction.message.accountKeys'), '$[' || json_extract(value, '$.programIdIndex') || ']') = transactions.program_id
GROUP BY transactions.id
LIMIT $3
`

type GetTransactionWithoutAliasParams struct {
	ProgramID string
	Data      string
	Limit     int32
}

type GetTransactionWithoutAliasRow struct {
	JsonExtract    interface{}
	JsonGroupArray interface{}
}

func (q *Queries) GetTransactionWithoutAlias(ctx context.Context, arg GetTransactionWithoutAliasParams) ([]GetTransactionWithoutAliasRow, error) {
	rows, err := q.db.Query(ctx, getTransactionWithoutAlias, arg.ProgramID, arg.Data, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionWithoutAliasRow
	for rows.Next() {
		var i GetTransactionWithoutAliasRow
		if err := rows.Scan(&i.JsonExtract, &i.JsonGroupArray); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
